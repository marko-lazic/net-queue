package ml.mlazic.netqueue.queues;

import com.rabbitmq.client.*;

import java.io.IOException;

/**
 * Postman.java
 * Purpose: Postman will eventually deliver the mail to your recipient.
 * In this analogy, RabbitMQ is a post box, a post office and a postman.
 *
 * @author Marko Lazic
 * @version 1.0 4/21/18
 */
public class Postman extends BasicQueue {
    /** The queue name. */
    private String queueName;

    /**
     * Postman constructor
     * @param connection the socket connection
     * @param queueName the name of the queue.
     */
    public Postman(Connection connection, Message messageHandler, String queueName) {
        super(connection, messageHandler);
        this.queueName = queueName;
    }

    /**
     * @param in an object to be sent.
     * @return if successful returns sent object else if exception occurs returns -1
     */
    public Object send(Object in) {
        try {
            channel.queueDeclare(queueName, false, false, false, null);
            channel.basicPublish("", queueName, null, in.toString().getBytes());
        } catch (IOException e) {
            e.printStackTrace();
            return -1;
        }
        return in;
    }

    //** @return consumerTag generated by the server else if exception occurs returns -1 */
    public Object receive() {
        try {
            channel.queueDeclare(queueName, false, false, false, null);

            Consumer consumer = new DefaultConsumer(channel) {
                @Override
                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
                        throws IOException {
                    String message = new String(body, "UTF-8");
                    messageHandler.process(message);
                }
            };
            return channel.basicConsume(queueName, true, consumer);
        } catch (IOException e) {
            e.printStackTrace();
            return -1;
        }
    }


}
